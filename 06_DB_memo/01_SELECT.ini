[SELECT]
- 지정된 테이블에서 원하는 데이터가 존재하는 행을
	선택해서 조회하는 SQL(구조적 질의 언어)

- 작성된 구문에 맞는 행, 열 데이터가 조회됨
  -> 조회 결과 행의 집합 == RESULT SET (중요!!)
  
- 조회 결과는 0행 이상 (조건에 맞는 행이 없을 수 있다)

=====================================================
* 해석 순서 *

5 : SELECT 컬럼명 AS 별칭, 계산식, 함수식
1 : FROM 참조할 테이블명
2 : WHERE 컬럼명 | 함수식 비교연산자 비교값
3 : GROUP BY 그룹을 묶을 컬럼명
4 : HAVING 그룹함수식 비교연산자 비교값
6 : ORDER BY 컬럼명 | 별칭 | 컬럼순번 정렬방식 [NULLS FIRST | LAST];

======================================================

1. [SELECT] 절 관련 구문

- SELECT문 작성 시 컬럼명에 산술 연산을 작성 가능
EX) SELECT EMP_NAME , SALARY , SALARY * 12
    FROM EMPLOYEE;

- 날짜 관련 구문
  SYSDATE / CURRENT_DATE / SYSTIMESTAMP / CURRENT_TIMESTAMP 
  * SYSDATE : 시스템이 나타내고 있는 현재 시간
  * CURRENT_DATE : 현재 세션(사용자 기반) 시간
  * SYSTIMESTAMP : 시스템이 나타내고 있는 현재 시간 
								-> ms 단위 + 지역 포함(보다 세세한 느낌??)
  * CURRENT_TIMESTAMP : 현재 세션(사용자 기반) 시간
  										 -> ms 단위 + 지역 포함

- 별칭 지정 방법
  * 컬럼명 AS 별칭   : 문자 O, 띄워쓰기 X, 특수문자 X
  * 컬럼명 AS "별칭" : 문자 O, 띄워쓰기 O, 특수문자 O
  TIP) ORACLE 에서 ""  == 작성된 그대로 인식, 오라클에서 문자열은 '' (홑따옴표)!

- 연결 연산자 '||' 두 컬럼을 이어서 하나의 컬럼으로 조회
EX) SELECT SALARY || '원' AS 급여
    FROM EMPLOYEE;

- DISTINCT(별개의, 전혀 다른) 중복 제거 후 조회
EX) SELECT DISTINCT DEPT_CODE
    FROM EMPLOYEE;

;------------------------------------------------------------------------------------------------
2. [FROM] 테이블명
- DUAL (DUmmy tAble) : 가짜 테이블(임시 테이블)

;------------------------------------------------------------------------------------------------
3. [WHERE] 절 관련 구문
- 테이블에서 조건을 충족하는 행을 조회할 때 사용
- WHERE절에는 조건식(true/false)만 작성

- 비교 연산자 : >, <, >=, <=, = (같다), !=, <> (같지 않다)
  (날짜도 범위 비교 가능)

- 논리 연산자 : AND, OR, NOT

- NULL 비교 연산
 * 컬럼명 IS NULL / 컬럼명 IS NOT NULL (O)
 * -> 지정된 컬럼에 값이 존재하지 않는 경우 / 존재하는 경우 (값의 유무를 따짐)

 TIP) JAVA 에서와 달리 SQL 의 NULL 은 값이 존재하지 않음을 의미
      (* JAVA는 참조하는 곳이 없음)

- 컬럼명 BETWEEN (A) AND (B)*/
  컬럼 값이 A 이상 B 이하인 경우 TRUE(조회하겠다)
EX) SELECT EMP_NAME , SALARY 
    FROM EMPLOYEE
    WHERE SALARY NOT BETWEEN 4000000 AND 6000000;

- 컬럼명 IN (값 1 , 값 2 , 값 3 ...)
  컬럼 값이 IN () 내에 존재하면 TRUE --> 조회 결과에 포함
  (== 연속으로 OR 연산을 작성한 것과 같은 효과)

- LIKE 비교하려는 값이 특정한 패턴을 만족시키면 조회하는 연산자
  [작성법]
  * '%' (포함)
  * '%A'   : A 로 끝나는 문자열
  * 'A%'   : A 로 시작하는 문자열
  * '%A%'  : A 가 포함된 문자열 (위치 무관)
  * '_' (글자 수)
  * 'A___' : A 로 시작하고 뒤에 3 글자만 있는 문자열
            EX) ABCS(O), ABCDE(X)
  * '___A' : 앞에 3 글자만 있고 A 로 끝나는 문자열

  ESCAPE 옵션) 와일드 카드가 아닌 단순 문자열로 인식
	-> 지정된 특수문자(아무거나) 뒤 "한 글자" 에만 적용된다!
EX)
  SELECT EMP_ID, EMP_NAME, EMAIL
  FROM EMPLOYEE                       ;'_' 을 문자열로 인식하게 해줌
  WHERE EMAIL LIKE '___#_%' ESCAPE '#'; -- 12 행 조회 

;------------------------------------------------------------------------------------------------
4. [ORDER BY] 절 
- 해석 순서 마지막 SELECT 절에서 선언한 별칭 사용 가능

- "중첩" 작성 가능 : 먼저 작성된 큰 그룹부터 정렬하고
                     큰 그룹의 정렬이 깨지지 않는 선에서
                     이후 작성된 작은 그룹을 정렬

- [ASC / DESC] (오름차순 / 내림차순)

- [NULLS FIRST / NULLS LAST] (NULL 위치 지정)

EX) 
  SELECT EMP_NAME, DEPT_CODE, SALARY
  FROM EMPLOYEE
  ORDER BY DEPT_CODE ASC, SALARY DESC;

;------------------------------------------------------------------------------------------------
5. [GROUP BY] 절
- 같은 값들이 여러개 기록된 컬럼을 가지고 같은 값들을 하나의 그룹으로 묶음

- GROUP BY 컬럼명 | 함수식

- 그룹으로 묶은 값에 대해서 SELECT절에서 그룹함수 사용 가능

- 여러 컬럼을 묶어서 그룹으로 지정 가능

EX) 
  SELECT 
    DECODE(SUBSTR(EMP_NO, 8, 1),
    			 '1', '남자',
    			 '2', '여자') "성별",
    FLOOR(AVG(SALARY)) "급여 평균",
    SUM(SALARY) "급여 합계",
    COUNT(*) "인원 수"
  FROM EMPLOYEE
  GROUP BY DECODE(SUBSTR(EMP_NO, 8, 1),
	  			 '1', '남자',
		  		 '2', '여자')
  ORDER BY COUNT(*) DESC; GROUP BY 절에 함수식 사용

;여러 컬럼을 묶어서 그룹으로 지정한 경우
  SELECT DEPT_CODE, JOB_CODE, SUM(SALARY), COUNT(*)
    FROM EMPLOYEE
  GROUP BY DEPT_CODE, JOB_CODE 	; 1) 부서별 그룹 후 2) 직급별 그룹
  ORDER BY DEPT_CODE ASC;
; EMPLOYEE 테이블에서 부서 별로 같은 직급인 사원의 급여 합계를 조회하고
; 부서 코드 오름차순으로 정렬

;------------------------------------------------------------------------------------------------
6. [HAVING] 절
- 그룹함수로 구해 올 그룹에 대한 조건을 설정

- HAVING 컬럼명 | 함수식 비교연산자 비교값

EX) 
  SELECT DEPT_CODE, SUM(SALARY)
  FROM EMPLOYEE
  GROUP BY DEPT_CODE
  HAVING SUM(SALARY) > 10000000
  ORDER BY DEPT_CODE ASC;


;------------------------------------------------------------------------------------------------
* ROLLUP & CUBE (집계함수) * 

- ROLLUP 함수 : 그룹별로 중간 집계 처리를 하는 함수
                그룹별로 묶여진 값에 대한 '중간 집계'와 '총 집계'를 계산하여 자동으로 추가하는 함수

- CUBE   함수 : 그룹별 산출한 결과를 집계하는 함수이다.
                그룹으로 지정된 모든 그룹에 대한 집계와 총 합계를 구하는 함수

* SET OPERATION (집합 연산) *

- 여러 개의 SELECT 결과물을 하나의 쿼리로 만드는 연산자
  (주의) 집합 연산에 사용되는 SELECT문은 SELECT절이 동일해야함

-- UNION     : OR 같은 개념 (합집합) --> 중복 제거
-- INTERSECT : AND 같은 개념 (교집합)
-- UNION ALL : OR 결과 값에 AND 결과값이 더해진거(합집합 + 교집합) --> 중복 미제거
-- MINUS     : 차집합 개념 

EX) 
; 부서 코드가 'D5' 인 사원의 이름, 부서 코드, 급여 조회
  SELECT EMP_NAME, DEPT_CODE, SALARY
  FROM EMPLOYEE
  WHERE DEPT_CODE = 'D5'		; 6 행 조회

  INTERSECT

; 급여가 400 만 초과하는 사원의 이름, 부서 코드, 급여 조회
  SELECT EMP_NAME, DEPT_CODE, SALARY
  FROM EMPLOYEE
  WHERE SALARY > 4000000;		; 8 행 조회

