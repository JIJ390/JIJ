[TCL](Transaction Control Language) : 트랜잭션 제어 언어
 (Transaction : 업무, 처리, 데이터베이스의 논리적 연산 단위)
 
 - 데이터 변경 사항(DML)을 묶어 하나의 트랜잭션에 담아 처리함.

 - 트랜잭션의 대상이 되는 데이터 변경 사항 : INSERT, UPDATE, DELETE (DML)
   [DML]
   1) COMMIT    : 메모리 버퍼(트랜잭션)에 임시 저장된 데이터 변경 사항을 DB에 반영
    
   2) ROLLBACK  : 메모리 버퍼(트랜잭션)에 임시 저장된 데이터 변경 사항을 삭제하고
                 마지막 COMMIT 상태로 돌아감. (== 트랜잭션 내용 삭제)
                
   3) SAVEPOINT : 메모리 버퍼(트랜잭션)에 저장 지점을 정의하여
                  ROLLBACK 수행 시 전체 작업을 삭제하는 것이 아닌
                  저장 지점까지만 일부 ROLLBACK 
 
   [SAVEPOINT 작성 요령]
    SAVEPOINT 포인트명1;
    ...
    SAVEPOINT 포인트명2;
    ...
    ROLLBACK TO 포인트명1; -- 포인트1 지점 까지 데이터 변경사항 삭제

    * SAVEPOINT 는 1회용!!
    * 보다 상위의 SAVEPOINT 로 ROLLBACK 하면 그 이전 SAVEPOINT 는 사라짐
  

[DDL](DATA DEFINITION LANGUAGE) : 데이터 정의 언어

  - 객체(OBJECT)를 만들고(CREATE), 수정(ALTER)하고, 삭제(DROP) 등

  - 데이터의 전체 구조를 정의하는 언어로 주로 DB관리자, 설계자가 사용함

  [CREATE] : 객체를 생성하는 구문(테이블, 뷰 등), 테이블로 생성된 객체는 DROP 구문을 통해 제거 할 수 있음 

    - 테이블 생성 표현식
        CREATE TABLE 테이블명 (
          컬럼명 자료형(크기), 
          컬럼명 자료형(크기),
          ...);

    -자료형
      1. NUMBER     : 숫자형(정수, 실수)
      2. CHAR(크기) : '고정'길이 문자형 (2000BYTE) 
        -> ex) CHAR(10) 컬럼에 'ABC' 3BYTE 문자열만 저장해도 10BYTE 저장공간을 모두 사용. 
        
      3. VARCHAR2(크기) : '가변'길이 문자형 (4000 BYTE)
        -> ex) VARCHAR2(10) 컬럼에 'ABC' 3BYTE 문자열만 저장하면 나머지 7BYTE를 반환함.
    
        * VARCHAR2 는 메모리 관리 면에서 효율적이나 일을 두 번하므로 느릴 수 있음
          따라서 고정된 길이 문자열을 다룰 때는 CHAR 를 쓰는 것이 효율적!!
    
        *** CHAR / VARCHAR2 주의사항 **
         - ORACLE은 기본적으로 UTF-8 문자 인코딩을 사용하는데
           UTF-8 은
    
          영어 / 숫자 1 BYTE
          한글 / 한자 3 BYTE
    
          로 저장하기 때문에 한글을 저장할 때는 크기(BYTE) 계산에 유의해야 함

      4. NVARCHAR2(문자 개수) : "가변" 길이 문자형 (4000BYTE)
         - BYTE 크기 단위가 아닌 글자수(문자 개수) 로 크기를 지정하는 타입
    
        EX) VARCHAR2(3)  : 가변길이 문자형 크기 3 BYTE
            NVARCHAR2(3) : 가변길이 문자 3개 까지 저장 가능
            * IF NVACHAR(2000)  => 6000 BYTE > 4000 BYTE 오류 발생 
        
      5. DATE : 날짜 타입
      6. TIMESTAMP : 날짜 타입 (MS 단위 + UTC 기준 시차)

  [제약조건](CONSTRAINTS) 
    - 사용자가 원하는 조건의 데이터만 유지하기 위해서 특정 컬럼에 설정하는 제약.
      데이터 무결성 보장을 목적으로 함. -> 데이터의 신뢰도 확보 

    - 제약조건 종류
      PRIMARY KEY, NOT NULL, UNIQUE, CHECK, FOREIGN KEY.

      1)  NOT NULL 
          해당 컬럼에 반드시 값이 기록되어야 하는 경우 사용 / 컬럼 레벨
      
      2)  UNIQUE
          컬럼에 입력 값에 대해서 "중복을 제한"하는 제약조건 / 컬럼 / 테이블 / (복합키 사용 경우 ONLY 테이블!)

      3)  PRIMARY KEY(기본키) 
          테이블에서 한 행의 정보를 찾기위해 사용할 컬럼을 의미(NOT NULL + UNIQUE)
          테이블에 대한 식별자(IDENTIFIER) 역할을 함 / 컬럼 / 테이블 / (복합키 사용 경우 ONLY 테이블)

      4)  FOREIGN KEY(외부키 / 외래키) *중요* ; 관계형 데이터베이스 핵심 
          참조(REFERENCES)된 다른 테이블의 컬럼이 제공하는 값만 사용할 수 있음
          FOREIGN KEY 제약조건에 의해서 테이블간의 관계(RELATIONSHIP)가 형성됨
          제공되는 값 외에는 NULL을 사용 가능  
          * 테이블을 연결하는 JOIN 의 연결고리 역할
          * 참조될 수 있는 컬럼은 PRIMARY KEY컬럼과
            UNIQUE 지정된 컬럼만 외래키로 사용할 수 있음
          * 참조할 테이블의 참조할 컬럼명이 생략이 되면, PRIMARY KEY로 설정된 컬럼이 자동 참조할 컬럼이 됨

          -- 부모 테이블 : 참조를 '당하는' 테이블 
          -- 자식 테이블 : 참조를 '하는'   테이블

          * FOREIGN KEY 삭제 옵션 
            - 부모 테이블의 데이터 삭제 시 자식 테이블의 데이터를 
              어떤식으로 처리할 지에 대한 내용을 설정할 수 있다.

              1. ON DELETE RESTRICTED(삭제 제한)로 기본 지정 / 삭제 불가

              2. ON DELETE SET NULL : 부모키 삭제시 자식키를 NULL로 변경하는 옵션 

              3. ON DELETE CASCADE(종속) : 부모키 삭제시 자식키도 함께 삭제

      5)  CHECK
          컬럼에 기록되는 값에 조건 설정을 할 수 있음
          

[작성 예제]

CREATE TABLE USER_TEST(
	USER_NO		NUMBER,
	USER_ID 	VARCHAR2(20),
	USER_PWD 	VARCHAR2(20) 
		; NOT NULL은 컬럼 레벨만 가능!
		CONSTRAINT NN_USER_PWD NOT NULL,                        ; NOT NULL 
		
	PNO			  CHAR(14)
		CONSTRAINT NN_PNO NOT NULL ,                            ; NOT NULL 
	GENDER		CHAR(3),
	PHONE		  CHAR(13),
	ADDRESS		VARCHAR2(300),
	STATUS		CHAR(1)
		CONSTRAINT NN_STATUS NOT NULL,                          ; NOT NULL 
	
	; 테이블 레벨
	CONSTRAINT PK_USER_TEST PRIMARY KEY(USER_NO), -- PK       ; PRIMARY KEY(
	CONSTRAINT UK_USER_ID   UNIQUE(USER_ID),                  ; UNIQUE
	CONSTRAINT UK_PNO		UNIQUE(PNO),                          ; UNIQUE
	CONSTRAINT CK_GENDER    CHECK(GENDER IN ('남', '여')),    ; CHECK
	CONSTRAINT CK_STATUS    CHECK(STATUS IN ('Y', 'N'))       ; CHECK
  );

COMMENT ON COLUMN USER_TEST.USER_NO IS '회원번호';
COMMENT ON COLUMN USER_TEST.USER_ID IS '회원아이디';
COMMENT ON COLUMN USER_TEST.USER_PWD IS '비밀번호';
COMMENT ON COLUMN USER_TEST.PNO IS '주민등록번호';
COMMENT ON COLUMN USER_TEST.GENDER IS '성별';
COMMENT ON COLUMN USER_TEST.PHONE IS '연락처';
COMMENT ON COLUMN USER_TEST.ADDRESS IS '주소';
COMMENT ON COLUMN USER_TEST.STATUS IS '탈퇴여부';


CREATE TABLE USER_USED_FK2(
  USER_NO NUMBER PRIMARY KEY,
  USER_ID VARCHAR2(20) UNIQUE,
  USER_PWD VARCHAR2(30) NOT NULL,
  USER_NAME VARCHAR2(30),
  GENDER VARCHAR2(10),
  PHONE VARCHAR2(30),
  EMAIL VARCHAR2(50),
  
  -- 컬럼 레벨로 FK 제약조건 작성
 	--> (컬럼레벨) FOREIGN KEY 라는 단어를 사용하지 않음!!
  GRADE_CODE NUMBER
    CONSTRAINT GRADE_CODE_FK2
    REFERENCES USER_GRADE2 (GRADE_CODE)
    ON DELETE SET NULL -- 삭제 옵션 추가

; 컬럼레벨일 경우
; 컬럼명 자료형(크기) [CONSTRAINT 이름] REFERENCES 참조할 테이블명 [(참조할컬럼)] [삭제룰]

; 테이블레벨일 경우
; [CONSTRAINT 이름] FOREIGN KEY (적용할컬럼명) REFERENCES 참조할테이블명 [(참조할컬럼)] [삭제룰]
);