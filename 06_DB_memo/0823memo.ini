ALTER TABLE 테이블명
컬럼(추가, 수정, 삭제)
제약조건(추가, 삭제)
이름변경(컬럼명, 제약조건명, 테이블명)

DROP TABLE 테이블명
(CASCADE CONSTRAINTS)
--> 테이블 삭제 시 연결되어 있는 FK 제약조건을 같이 삭제

=========================================================================

[DDL](Data Definition Language) : 데이터 정의 언어
ALTER(바꾸다, 변조하다)
수정 가능한 것 : 컬럼(추가/수정/삭제), 제약조건(추가/삭제)
                 이름변경(테이블, 컬럼, 제약조건)

1. 제약조건 추가 / 삭제

- 제약조건 추가 ) 
  ALTER TABLE 테이블명 
  ADD [CONSTRAINT 제약조건명] 제약조건(컬럼명) [REFERENCES 테이블명[(컬럼명)]];

- 제약조건 삭제 )
  ALTER TABLE 테이블명
  DROP CONSTRAINT 제약조건명;

[작성 예제]---------------------------------------------------

ALTER TABLE DEPT_COPY
ADD CONSTRAINT DEPT_COPY_PK PRIMARY KEY(DEPT_ID);

ALTER TABLE DEPT_COPY
ADD CONSTRAINT LOCATION_ID_CHK 
CHECK(LOCATION_ID IN ('L1', 'L2', 'L3', 'L4', 'L5'));

ALTER TABLE DEPT_COPY
MODIFY DEPT_TITLE NOT NULL; 

---------------------------------------------------------------

2. 컬럼 추가/수정/삭제

- 컬럼 추가) 
  ALTER TABLE 테이블명 
  ADD(컬럼명 데이터타입 [DEFAULT '값']);

- 컬럼 수정) 
  ALTER TABLE 테이블명 
  MOIDFY 컬럼명 데이터타입;   (데이터 타입 변경)

  ALTER TABLE 테이블명 
  MOIDFY 컬럼명 DEFAULT '값'; (기본값 변경)

- 컬럼 삭제)
  ALTER TABLE 테이블명 DROP (삭제할컬럼명);
  ALTER TABLE 테이블명 DROP COLUMN 삭제할컬럼명;

  * 테이블에는 최소 1개 이상의 컬럼이 존재해야 되기 때문에 모든 컬럼 삭제 X

[작성 예제]-------------------------------------------------------------

ALTER TABLE DEPT_COPY
ADD(CNAME VARCHAR2(20));

ALTER TABLE DEPT_COPY
ADD (LNAME VARCHAR2(30) DEFAULT '한국');

ALTER TABLE DEPT_COPY
MODIFY LNAME DEFAULT '대한민국';
; 기본값 세팅 후 변경해도 RESULT SET 의 컬럼값이 변경되지는 않음
; 바꾸려면 UPDATE 해줘야 함!

ALTER TABLE DEPT_COPY
DROP(CNAME);

-------------------------------------------------------------------------

* 'DDL / DML을 혼용'해서 사용할 경우 발생하는 문제점
  DML을 수행하여 트랜잭션에 변경사항이 저장된 상태에서
  COMMIT/ROLLBACK 없이 DDL 구문을 수행하게되면
  DDL 수행과 동시에 선행 DML이 '자동으로 COMMIT' 되어버림.



3. 테이블 삭제

- DROP TABLE 테이블명 [CASCADE CONSTRAINTS]
  * CASCADE CONSTAINTS 옵션 : FK 제약 조건 같이 삭제

[작성 예제]--------------------------------------------------------------

DROP TABLE TB1;

DROP TABLE TB1 CASCADE CONSTRAINTS;

-------------------------------------------------------------------------

4. 컬럼, 제약조건, 테이블 이름 변경(RENAME)

예시 테이블)
  ALTER TABLE DEPT_COPY
  ADD CONSTRAINT DEPT_COPY_PK PRIMARY KEY(DEPT_ID);

- 컬럼명 변경 
  ALTER TABLE 테이블명 
  RENAME COLUMN 컬럼명 TO 변경명;

EX) DEPT_TITLE -> DEPT_NAME
ALTER TABLE DEPT_COPY
RENAME COLUMN DEPT_TITLE TO DEPT_NAME;

- 제약조건명 변경 
  ALTER TABLE 테이블명 
	RENAME CONSTRAINT 제약조건명 TO 변경명;

EX) DEPT_COPY_PK -> PK_DCOPY
ALTER TABLE DEPT_COPY
RENAME CONSTRAINT DEPT_COPY_PK TO PK_DCOPY;

- 테이블명 변경
  ALTER TABLE 테이블명 RENAME TO 변경명;

EX) DEPT_COPY -> DCOPY 변경
ALTER TABLE DEPT_COPY
RENAME TO DCOPY;

===============================================================
[VIEW]

- 논리적 가상 테이블 (테이블 모양을 하고는 있지만, 실제로 값을 저장 X)

- SELECT문의 실행 결과(RESULT SET)를 저장하는 객체

* VIEW 사용 목적 *
 - 복잡한 SELECT문 '재사용'
 - 테이블의 진짜 모습을 감출 수 있어 '보안상 유리'
 
* VIEW 사용 시 주의 사항 *
 - ALTER 구문 사용 불가 (가상 테이블)
 - DML 사용이 가능한 경우는 있지만 
   제약이 많이 따르기 때문에 '조회(SELECT)' 용도로 대부분 사용

  [작성법]
  CREATE [OR REPLACE] [FORCE | NOFORCE] VIEW 뷰이름 [컬럼 별칭]
  AS 서브쿼리(SELECT문)
  [WITH CHECK OPTION]
  [WITH READ OLNY];

  ; OR REPLACE        옵션 : 동일한 이름의 VIEW가 존재시 이를 변경, 없으면 새로 생성
  ; FORCE             옵션 : 서브쿼리에 사용된 테이블이 존재하지 않아도 뷰 생성
  ; NOFORCE(기본값)   옵션 : 서브쿼리에 사용된 테이블이 존재해야만 뷰 생성
  ; 컬럼 별칭         옵션 : 조회되는 VIEW의 컬럼명을 지정
  ; WITH CHECK OPTION 옵션 : 옵션을 지정한 컬럼의 값을 수정 불가능하게 함.(UPDATE 못하게 함)
  ;                           * WITH READ OLNY 옵션 을 주로 사용함
  ; WITH READ OLNY    옵션 : 뷰에 대해 SELECT만 가능하도록 지정 / DML 불가, 읽기 전용!!!!

* VIEW 를 생성하기 위해서는 생성권한을 부여해야 함
  VIEW 생성은 기본권한(GRANT RESOURCE, CONNECT TO KH_JIJ) 에 포함되지 않기 때문!
  (관리자 계정)
  ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
  GRANT CREATE VIEW TO 사용자계정;

  [작성예제]---------------------------------------------------------------

  CREATE VIEW V_EMP         
  AS SELECT * FROM EMPLOYEE; 단순 형태

  CREATE OR REPLACE VIEW V_DCOPY2 ; REPLACE : 대체
  AS 
  SELECT 
    DEPT_ID,
    LOCATION_ID
  FROM DEPT_COPY2
  WITH READ ONLY;                  읽기 전용

  =========================================================================

[SEQUENCE](순서, 연속)
- 순차적으로 일정한 간격의 숫자(번호)를 발생시키는 객체(번호 생성기)

- 주로 'PK'가 지정된 컬럼에 삽입될 값을 생성할 때 SEQUENCE를 사용

  [작성법]
  CREATE SEQUENCE 시퀀스이름
  [STRAT WITH 숫자]            ; 처음 발생시킬 시작값 지정, 생략하면 자동 1이 기본
  [INCREMENT BY 숫자]          ; 다음 값에 대한 증가치, 생략하면 자동 1이 기본
  [MAXVALUE 숫자 | NOMAXVALUE] ; 발생시킬 최대값 지정 (10의 27승 -1)
  [MINVALUE 숫자 | NOMINVALUE] ; 최소값 지정 (-10의 26승)
  [CYCLE | NOCYCLE]            ; 값 순환 여부 지정
  [CACHE 바이트크기 | NOCACHE] ; 캐쉬메모리 기본값은 20바이트, 최소값은 2바이트
	* 시퀀스의 캐시 메모리는 할당된 크기만큼 미리 다음 값들을 생성해 저장해둠
    --> 시퀀스 호출 시 미리 저장되어진 값들을 가져와 반환하므로 
        매번 시퀀스를 생성해서 반환하는 것보다 DB속도가 향상됨.

  - 시퀀스명.NEXTVAL : 다음 시퀀스 번호를 얻어옴
                       단, 생성 후 처음 호출된 시퀀스인 경우
                       START WITH에 작성된 값이 반환

  - 시퀀스명.CURRVAL : 현재 시퀀스 번호를 얻어옴
                       단, 시퀀스가 생성 되자마자 호출할 경우 오류 발생
                       마지막으로 호출한 NEXTVAL 값을 반환
            
[작성 예제] --------------------------------------------------------------------
CREATE SEQUENCE SEQ_TEST_NO
START WITH 100 			; 시작 번호 100
INCREMENT BY 5			; NEXTVAL 호출 시 5 씩 증가
MAXVALUE 150				; 증가 가능한 최대값 150
NOMINVALUE 					; 최소값 없음
NOCYCLE							; 반복 안함
NOCACHE;						; 미리 만들어둔 시퀀스 번호 없음

--CREATE SEQUENCE SEQ_TEST_NO
--NOCACHE;			가장 많이 사용하는 형태

--------------------------------------------------------------------------------

===================================================================================

[INDEX] : (색인)번호로 위치를 알게 함

- SQL 구문 중 SELECT 처리 속도를 향상 시키기 위해 컬럼에 대하여 생성하는 객체
							
										 (Binary tree)
- 인덱스 내부 구조는 B* 트리 형식으로 되어있음.

* INDEX 의 장점 *
- 이진 트리 형식으로 구성되어 '자동 정렬 및 검색 속도 증가'.

- 조회 시 테이블의 전체 내용을 확인하며 조회하는 것이 아닌
  인덱스가 지정된 컬럼만을 이용해서 조회하기 때문에
  시스템의 부하가 낮아짐.

* INDEX 의 단점 *
- 데이터 변경(INSERT,UPDATE,DELETE) 작업 시 
	 이진 트리 구조에 변형이 일어남
   -> DML 작업이 빈번한 경우 시스템 부하가 늘어 성능이 저하됨.
	 --> 반대로 SELECT 수행을 주로 할 때는 효과적!

- 인덱스도 하나의 객체이다 보니 별도 저장공간이 필요(메모리 소비)
- 인덱스 생성 시간이 필요

* 인덱스가 자동 생성 *
 -> 'PK 또는 UNIQUE' 제약조건이 설정된 컬럼에 대해 'UNIQUE INDEX'가 자동 생성된다. 

-- 인덱스 X 
-- TEST_ID 가 'TEST500000' 인 행 조회하기
SELECT * FROM TB_IDX_TEST
WHERE TEST_ID = 'TEST63200'; -- 0.009S

-- 인덱스 O
-- TEST_NO 가 'TEST500000' 인 행 조회하기
SELECT * FROM TB_IDX_TEST
WHERE TEST_NO = 500000; -- 0.002S -> 0.000S