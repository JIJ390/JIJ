@RequestParam 단수 파라미터
 * 	@RequestParam("title")     String t,

복수 파라미터
 * @RequestParam(value="fruit", required = false) List<String> fruitList,
 * @RequestParam Map<String, Object> paramMap

 required=false : 제출된 매개 변수가 null 이어도 오류 안나도록 (400 error)
 # checkbox, radio
 # 직접 쿼리스트링을 작성 

재요청 예시
 return "redirect:/param/main";

 매개 변수 자리

/* @ModelAttribute */  Member member
'파라미터 name 속성 값 == DTO 필드명'
자동으로 setter를 호출해서 필드에 값을 세팅

req 대신 model 객체 사용
scope 범위 변화 가능!

[thymeleaf]

xmlns:th="http://www.thymeleaf.org"

tt
<li th:text="${fruitList[0]}"></li>

te
<li th:each= "fruit:${fruitList}" th:text="${fruit}"></li>

block 으로 안헷갈리게
<th:block th:each= "fruit:${fruitList}">
  <li th:text="${fruit}"></li>
</th:block>

객체 필드 가져오기
  <ul>
    <li th:text="${std.studentNo}">학번</li>
    <li th:text="${std.name}">이름</li>
    <li th:text="${std.age}">나이</li>
  </ul>

객체명 생략 (필드명만)
  <ul th:object="${std}">
    <li th:text="*{studentNo}">학번</li>
    <li th:text="*{name}">이름</li>
    <li th:text="*{age}">나이</li>
  </ul>

|| 문자열 포함
  <h4 th:text="|제출된 나이 : ${param.inputAge}|"></h4>

  <ol> // checkbox
    <li th:each= "c:${param.color}" th:text="${c}"></li>
  </ol>

대체 특수 기호 표현
  <tth:text="${str}"    /  [[${str}]]  : innerText
  <tth:utext="${str}"   /  [(${str})]  : innerHTML

messages.properties
  <h2 th:text="#{app.name}">앱 이름</h2>
  <img src="/images/logo.png">


th:text="${std.studentNo}" -> * 사용
*{필드명}
  <ul th:object="${std}">
    <li th:text="*{studentNo}">학번</li>
    <li th:text="*{name}">이름</li>
    <li th:text="*{age}">나이</li>
  </ul>

th:if / th:unless : 조건식
  th:if= "${std == null}"
  th:unless= "${std == null}"


  th:switch="${num}"

    <p th:case="100">AAAAAAAAAAAA</p>
    <p th:case="200">BBBBBBBBBBBB</p>


삼항 연산자

  <h4 th:text="${std.age == 5} ? '다섯살' : '다섯날 아님' "></h4>

Elvis 연산자 ( ?: ) null 이면 뒤에것 출력

  <h4 th:text="${std} ?: '학생 없음'"></h4>

No-Operation 연산자 ( 값 ?: _ ) 

  <h4 th:text="${std} ?: _">std 정보 출력</h4>

  <h4 th:text="${member} ?: _">
    <img src="/images/logo.png">
  </h4>

자동 파싱
  <script th:inline = "javascript">
    const message = /*[[${message}]]*/ "메시지" ;