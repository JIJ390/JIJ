[Ajax]
* 비동기 통신,(멀티 태스킹??)

장점
- 전체 페이지를 갱신하지 않고 '일부분'만 업데이트 가능
- 사용자에게 즉각적인 반응과 풍부한 UI 경험을 제공 가능
- ActiveX나 플러그인 프로그램 설치 없이 이용 가능   (JS 내장)
- JavaScript 방식, jQuery 방식으로 구현 가능

단점
- Ajax는 JavaScript이므로 브라우저에 따른 크로스 브라우저 처리가 필요함
- 오픈 소스로 차별화가 어려움
- 연속적인 데이터 요청 시 서버 부하 증가하여 페이지가 느려짐
- 페이지 내 복잡도가 증가하여 에러 발생 시 디버깅이 어려움

JavaScript방식 Ajax – 방법 1 : XMLHttpRequest 어렵

[JavaScript방식 Ajax – 방법 2 : fetch() API]

[GET방식 요청 작성 방법]
fetch("요청주소") // 지정된 주소로 GET방식 비동기 요청(ajax)
// 전달하고자 하는 파라미터를 주소 뒤 쿼리스트링으로 추가
.then(response => response 파싱 ) // 요청에 대한 응답 객체(response)를 필요한 형태로 파싱
.then(response 파싱 데이터 => {}); // 첫 번째 then에서 파싱한 데이터를 이용한 동작 작성
.catch( e => {}) // 예외 발생 시 처리할 내용을 작성

[POST 방식 요청 작성 방법]
fetch("요청주소", { // 지정된 주소로 비동기 요청(ajax)
method : “POST”, // 데이터 전달 방식을 POST로 지정
headers: {"Content-Type": "application/json"}, // 요청 데이터의 형식을 JSON으로 지정
body : JSON.stringify( {K:V, K:V} ) // JS객체를 JSON 형태로 변환하여 Body에 추가
})
.then(response => response 파싱 ) // 요청에 대한 응답 객체(response)를 필요한 형태로 파싱
.then(response 파싱 데이터 => {}); // 첫 번째 then에서 파싱한 데이터를 이용한 동작 작성
.catch( err => {}) // 예외 발생 시 처리할 내용을 작성


JSON.stringify(obj) // 문자열화

[JSON] (JavaScript Object Notation (자바스크립트 객체 표현법))
순수 TEXT 기반.
모든 언어에서 공통적으로 사용하는 자료형 'String'
또는 다룰 수 있는 라이브러리 존재

Ajax 통신에서 Object 타입의 데이터 전송 시 XML 대비 용량이 '작고 속도가 빠름'
→ 경량 데이터 교환 방식


※ Promise(약속) 객체 : 비동기 요청에 대한 처리가 완료되면 바로 결과를 제공하겠다고 약속
-> 비동기 요청 시 동시에 다른 JS 코드가 실행되고 있음

