[ajax 복습!!!]

@RequestParam 
<:- 요청 시 제출된 데이터(쿼리스트링, input)를 얻어와 
    매개변수에 저장하는 어노테이션

@RequestMapping 
<:- 요청 주소에 따라서 
    알맞은 컨트롤러 클래스/메서드에 연결하는 어노테이션

@RequestBody 
<:- 비동기 요청 시 body 에 담겨져 전달되는 데이터를
    매개변수에 저장하는 어노테이션

@ResponseBody
<:- 비동기 요청 코드 : 응답 본문(ajax 코드) 에
    값 그대로 반환하는 어노테이션

?**

닉네임 #,& 특문 빨간 글자

----  
상대 경로 : 현재 위치를 기준으로 목효하는 경로/주소 작성
<form action="changePw" method="POST" name="myPageFrm" id="changePw">

현재 주소 : /myPage/changePw (GET)

요청 주소 : /myPage/changePw (POST)

현재 위치 : /member/changePw
  --> changePw 이 작성된 칸 기준!!

목표 위치 : /member/changePw(POST)

--> 상대 경로 : logout


----

탈퇴/ 삭제 처리 방법
* DELETE 아님!!!

1) 상태 값 변경 (Y/N)

2) 기존 데이터 -> 탈되 삭제 테이블 이동
   이동 후 기존 데이터를 쓰레기값으로 변경

---
비밀번호 변경 유효성 검사

1. 현재 비밀번호 
   새 비밀번호
   새 비밀번호 확인
   입력 여부 체크

2. 비밀번호가 알맞은 형태로 작성되었는가 확인
  - 영어(대소문자 가리지 X) 1 글자 이상
  - 숫자 1 글자 이상
  - 특수문자(! @ # _ -) 1 글자 이상
  - 최소 6 글자 최대 20 글자

3. 새 비밀번호 == 새 비밀번호 확인 일치하는지 체크

*GPT*
JS 에서 비밀번호를 입력받아 유효성 검사하는 코드 생성
[조건]
  - 영어(대소문자 가리지 X) 1 글자 이상
  - 숫자 1 글자 이상
  - 특수문자(! @ # _ -) 1 글자 이상
  - 최소 6 글자 최대 20 글자

function validatePassword(password) {
    // 정규 표현식
    const hasUpperCase = /[A-Z]/.test(password);
    const hasLowerCase = /[a-z]/.test(password);
    const hasNumber = /\d/.test(password);
    const hasSpecialChar = /[!@#_-]/.test(password);
    const isValidLength = password.length >= 6 && password.length <= 20;

    // 모든 조건을 만족하는지 체크
    if (hasUpperCase || hasLowerCase) {
        if (hasNumber && hasSpecialChar && isValidLength) {
            return true;
        }
    }

    return false;
}

// 비밀번호 입력 받기
const passwordInput = prompt("비밀번호를 입력하세요:");

if (validatePassword(passwordInput)) {
    console.log("비밀번호가 유효합니다.");
} else {
    console.log("비밀번호가 유효하지 않습니다. 조건을 확인하세요.");
}


---------------

JS 에서 닉네임을 입력받아 유효성 검사하는 코드 생성
[조건]
- 영어 또는 숫자 또는 한글만 작성 가능
- 3 글자 ~ 10 글자


----------------


JS 에서 전화번호를 입력받아 유효성 검사하는 코드 생성
[조건]
- 010 시작
- 11 글자 숫자
- '-' 제외