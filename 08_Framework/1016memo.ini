[로그인이 안되어 있으면 동작하지 못하는 요청을 필터 처리]

- /myPage 로 시작하는 요청을
- /editBoard 로 시작하는 요청

[Spring AOP ]

Spring AOP 란, 관점 지향 프로그래밍(Aspect Oriented Programming)의 약자로
일반적으로 사용하는 클래스(Service, Dao 등) 에서 중복되는 공통 코드 부분(commit, rollback, log 처리)
을 별도의 영역으로 분리해 내고, 코드가 실행 되기 전이나 이 후의 시점에 해당 코드를 붙여 넣음으로써
소스 코드의 중복을 줄이고, 필요할 때마다 가져다 쓸 수 있게 객체화하는 기술을 말한

공통되는 부분을 따로 빼내어 작성하는 메소드를 'Advice'라고 이야기 하며, 
Advice를 적용될 수 있는 모든 관점(시점, 메소드)을 'JoinPoint', 
JoinPoint 중 실제 Advice를 적용할 부분을 'Pointcut'
그리고 그 시점에 공통 코드를 끼워 넣는 작업을 'Weaving' 이라고 말한다

"Advice + Pointcut = Aspect"
실제로 동작 코드를 의미하는 Advice와
작성한 Advice가 실제로 적용된 메소드인 Pointcut을 합친 개념으로
부가기능(로깅, 보안, 트랜잭션 등)을 나타내는 공통 관심사에 대한 추상적인 명칭.
(여러 객체에 공통으로 적용되는 부가기능을 작성한 클래스 나타냄)
AOP 개념을 적용하면 핵심기능 코드 사이에 끼어있는 부가기능을 독립적인 요소로 구분해 낼 수 있고,
이렇게 구분된 부가기능 Aspect는 '런타임 시'에 필요한 위치에 동적으로 참여하게 할 수 있다. 