[OOP] (Object Oriented Programming)
(객체 지향 프로그래밍)
- 객체로 이루어잔 현실 세계
- 객체 간의 상호 작용으로 사건이 발생
= ,라는 패러다임을 컴퓨터로 옮겨 놓은 것/ 프래그래밍

1. 추상화

2. 캡슐화 (묶음) + (보호)

3. 상속 (코드 : 재사용성 / 유지보수/ 길이감소)

4. 다형성

[객체(Object)] 
* 속성과 기능이 식별 가능??
* 현실 세계의 모든 것/이름과 역할이 있는 것

* in Java : 클래스에 정의된 내용대로
            new 연산자에 의해서 Heap 메몰리 영역에 생성된 것

stack : n2 / Heap : 0x300(Nation 자료형)

1) '클래스'(class) : 객체의 특성[속성(필드), 기능(메서드)]에 대한 정의를 한 것 
    == 객체의 설계도

[추상화] - 구체화

구체적인 것을 제거, 공통적인 것만 남김
-> 유연성 확보, 필요한 공통점을 추출


[캡슐화] 
1) 기능 + 속성 하나로 묶어서 관리 -> class {}
2) 안보이게 가리기
 -> 정보 은닉 효과

데이터들과 기능을 하나로 묶어 관리
데이터(속성 == 필드)에 직접 접근하는 것을 제한
  -> 필드에는 private 접근 제한자를 붙임
  -> 필드에 대한 간접 접근 방법 제공(getter, setter)

(ex 계좌 객체에서 pw와 잔액 등 내부 정보를 확인할 수 없음)

기능을 이용해 데이터에 간접 접근

[객체 생성 메모리 구조]

1)        3) 2)
Nation n2 = new Nation();

1) [Stack] 메모리 영역에 Nation 자료형 변수 n2 를 선언
   - Nation 자료형 변수 == Nation 객체를 [참조하는 참조형 변수]

2) [Heap] 메모리 영역에 Nation [클래스]에 정의된 내용을 토대로 [객체 생성]

   - new 연산자 : Heap 메모리 영역에 새로운 객체 생성 (공간을 할당)

3) 생성된 객체의 [시작 주소] 를 n2 변수에 대입하여 참조할 수 있게함

   - n2 자료형          == Nation  
     생성된 객체 자료형 == Nation  같은 자료형이므로 대입 가능

[Object 와 Instance 차이]

ex) 현실에 존재하는 실제 물체 '나' 
    객체 지향 언어를 이용해 코드로 작성해서
    new 연산자를 통해 객체로 생성
    -> 생성된 객체는 진짜 객체??? NO!1!1!

  현실에 존재하는 진짜 객체 : 'Object'
  컴퓨터에 생성된 객체      : 'Instance'
  (코드를 이용해 만들어진)

  (+ class 까지 묶어서 차이점 정리하기)

[생성자]
객체 안에서 만들어지는 '필드 초기화 + 생성 시 필요한 기능 수행'

생성자는 일종의 method로 전달된 초기값을 받아서 객체의 필드에 기록

<생성자명>, <클래스명> 똑같이 작성!!!

[메모리 영역]

<Stack>  : 호출된 메서드가 쌓이는 영역
           + 메서드 내 지역변수도 Stack 영역에 생성

<Heap>   : 동적 메모리 영역
           프로그램 실행 중 객체가 생성 / 소멸하는 영역
           new 연산자를 이용해 클래스에 정의된 내용대로 객체(Instance) 를 생성
           
           소멸 : Garbage Collection 이 일정 시간 마다 사용되지 않는 객체를 소멸
                  (메모리 반환)

<Static> : 정적 메모리 영역
           프로그램 실행 시 static 키워드가 붙은 필드 / 메서드를 static 영역에 생성(할당)
           어디서든 공유 가능(단, public 일 경우)
           (객체 생성 없이)
           클래스명.필드명 / 클래스명.메서드명() 으로 호출
