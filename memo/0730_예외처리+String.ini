(String 객체를 생성하는 방법)

1) String s1 = "Hello"; 			   // 리터럴 표기법을 이용한 방법
-> Heap 영역 내부에 Constant(상수) Pool 에 String 객체 생성 

2) String s1 = new String("Hello"); // new 연산자를 이용한 방법
-> Heap 영역에 String 객체 생성

[String 의 불변성(immutable)]
- String 은 기본적으로 값이 변하는 것이 불가능

[StringBuilder]
*  -> 가변성(mutable)

기본 16글자 저장할 크기로 생성

저장되는 문자열의 길이에 따라 크기가 증가/감소
-> 마음대로 문자열 수정, 삭제 가능!
-> 수정, 삭제를 해도 추가적인 객체 생성이 없어 효율 좋음

{String 관련 메서드}

1. String[] 문자열.split("구분자")    ; 구분자로 배열 만들기
2. String String.join("구분자", 배열) ; 배열을 구분자를 넣어 문자열로
3. Stirng 문자열.replace("대상 문자열", "바꿀 문자열") ; 문자열 바꾸기


[예외 처리]

컴파일 에러 : 코드 문법 에러 (오타)
런타임 에러 : 실행 중 발생, 알고리즘 문제 ; 대부분 if 문 사용으로 에러 처리
;              ex) int a = 100 / 0
시스템 에러 : 컴퓨터 오작동

(Java 에서 에러 / '예외'를 발생시키는 방법)

ex)
; String str = null;  str.split("/"); 
 -> JVM 이 'new NullPointException()'구문 수행
    (JVM이 코드를 수행중 예외상황을 만나면 그 상황에 맞는 
     객체를 만들어 그 위치에 던짐)

 -> 만들어진 예외 객체를 던짐(throw)
; --> 예외 처리 구문 없으면 --> 프로그램 종료
; --> 예뢰 처리 구문 있으면 --> 처리 후 정상 수행

반드시 예외 처리해야 하는 Checked Exception
꼭 해줄 필요는 없는       Unchecked Exception


[예외처리 방법]

1. Exception 이 발생한 곳에서 직접 처리

    try {
        ;예외가 던져질 것 같은 구문
    } catch(예외 참조 변수) {
        ;처리 구문
    } catchㆍㆍㆍ 

* 부모 자식 상속 관계 확인해서 예외 참조 변수 작성
  부모 클래스가 아래쪽에 위치하도록 작성(채망, if, else 문처럼)

2. Exception 처리를 호출한 메소드에게 위임

  메소드 선언 시 'throws Exception명' 을 추가하여 
  호출한 상위 메소드에게 처리 위임

  * 왜 쓰는지? 예외 발생 가능성 경고 + 곳곳에서 발생하는 예외를 모아 한 번에 처리

  * Runtime 계열 예외는 throws 작성하지 않아도 
    컴파일러가 작성해줌. throws 구문 뒤에는 여러 예외를 동시 작성 가능

  * 오버라이딩 시 throws 하는 Exception의 개수와
    상관없이 처리 범위가 같거나 후손 이여아 함
