[상속]

'클래스의 재사용, 공통적인 규약 정의'

자바에서는 다중 상속 불가

오버라이딩과 오버로딩의 차이

오버로딩 : 하나의 메서드 이름으로 매개변수에 따라 다르게 동작하는 메서드를 만듦
--> 동일한 동작을 요구할 때 매개 변수가 다른 경우를 유연하게 대처
여러가지 일에 대처 가능

키워드 :  super(), Overriding, extends, final 클래스/메서드

[다형성]

다양한 형태

'상속을 이용한 기술'로 부모 클래스 타입 참조변수 하나로
상속 관계에 있는 여러 타입의 자식 객체를 참조할 수 있는 기술

{업 캐스팅} : Parent p2 = new Child1();

객체 배열을 위해 쓰는걸까?

-> 추상 클래스!!!

상속관계에서 '참조 변수' 의 자료형에 따라 참조 당하는 '객체'의
자료형이 변하는 '것처럼' 보이는 것

'부모 타입' 의 참조 변수가 '자식 타입' 의 객체를 참조하여 참조 당하는 '자식 객체' 의 전체가 아니라
내부에 존재하는 '부모 객체' 만 참조하게 됨
 -> 자식 객체가 부모 객체로 변한 것처럼 보임

'Parent' 참조 변수 'p2' 가 'Child' 객체를 참조하고 있지만
'Child' 내부에 구현된 'Parent' 만을 참조할 수 있기 때문에
'Parent' 객체로 변한 것처럼 보인다.

객체의 원래 모습       : 'Child'
변한 모습(처럼 보이는) : 'Parent'

한 객체가 2 가지 모습을 가짐 ==> ['다형성']

{객체 instanceof 클래스명} 연산자 : - 참조하고 있는 객체가 클래스명 객체가 맞는지 확인
                        true, false 로 반환 	

참조하고 있는 '객체'가 '클래스명' 객체를 '상속' 받았는지(포함하고 있는지) 확인

객체가 클래스명이거나 클래스명을 상속받는 클래스라면 true를 리턴합니다. 
그렇지 않으면 false를 리턴합니다.

큰 양동이 작은 양동이 개념으로 이해
*클래스명 은 변수명 참조 객체에 속하는가? 

Child > Parent > Object

Object p1 = new Child();

p1 instanceof Child  : true;
p1 instanceof Parent : true;
p1 instanceof Object : true;

Object p2 = new Parent();

p2 instanceof Child  : false;
p2 instanceof Parent : true;
p2 instanceof Object : true;

Object p3 = new Object();

p3 instanceof Child  : false;
p3 instanceof Parent : false;
p3 instanceof Object : true;

만약 Object를 검사하게 되면 모든 객체가 Object를 상속하므로 
true가 나올 수 밖에 없음

'참조하고 있는 객체' 가 중요
변수의 자료형은 무의미

ex) Parent p2 = new Child
Child를 참조하면 그 상위 클래스(Parent, Object)

{다운 캐스팅} 부모 객체를 자식으로 강제 형변환

> 업캐스팅 상태의 

'부모' 참조 변수 = '자식' 객체; 

에서 참조 변수의 타입을 (자식) 으로 강제 형변환하여

'자식' 참조 변수 = '자식' 객체;

로 변경

ex) Object p2 = new Parent();
    (Parent)p2;

이렇게 하면 Parent 객체의 필드, 메서드에 접근 가능


[바인딩]

정적 메모리 영역 : Static       프로그램 시작 / 종료와 함께 생성 소멸
동적 메모리 영역 : Heap / Stack 프로그램 실행중 생성과 소멸 발생

정적 바인딩 : 프로그램 실행 전
동적 바인딩 : 프로그램 실행 중

상속 관계로 이루어져 다형성이 적용된 경우, 
메소드 오버라이딩이 되어 있으면
정적으로 바인딩 된 메소드 코드보다 
'오버라이딩 된 메소드 코드'를 우선적으로 수행


[추상 클래스]

abstract

알아야할 개념) 상속, 오버라이딩 우선권

자식이 부모의 메서드를 오버라이딩 하면
오버라이딩한 메서드가 우선권을 가지기 때문에 

부모의 추상 메서드는 없는 셈쳐도 문제가 없다!!!
-> 자식 객체 내 부모 객체가 추상이 아닌 정상적인 모습으로 인식됨!!

[인터페이스]
1) 극한의 추상화 - 유연성 확보
2) 클래스 간의 접점 (억지로 공통점 찾기??)

public abstract
public static final

