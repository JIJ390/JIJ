[A.equals("B") 와 A == B의 차이]

연산자 '==' 은 [주소를 비교]
String 에서 '.equals()' 는 주소 비교 후 다르면 
문자열을 문자 단위로 잘라서 [직접 비교] 후 결과 반환

[ex] 
  String a = "abc";
  String b = "abc";
  String c = new String("abc");

  System.out.println(a.equals(b));
  System.out.println(a.equals(c));
  System.out.println(b.equals(c));
  System.out.println(a == b);
  System.out.println(a == c);

;========== 결과 ==========

  true
  true
  true
  true
  false


먼저 'a' 가 생성, 메모리에 'abc'라는 값이 저장된 방이 만들어짐
a는 이 주소값을 참조
같은 값을 가진 b도 abc 라는 값이 저장된 방의 주소를 참조
즉, a 와 b는 '같은 주소값'을 가짐!!!

하지만 'c' 는 '새로 방을 생성'함
a,b 와 같은 값을 가지고 있지만 독자적인 '다른 방의 주소 값'을 가지게 된다!!!!

번외) 'char' 논 기본 자료형이기 때문에 '==' 연산자 사용해도 값 비교함

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

[얕은 복사와 깊은 복사]

배열 예제 13)

public void practice13() {
		
		System.out.print("배열의 크기를 입력하세요 : ");
		int value = sc.nextInt();
		
		int num = 0;
		char input;
		
		String[]	arr = new String[value];
		String[]	arrPlus = arr;
		
		sc.nextLine();
		
		for (int i = 0; i < value; i++) {
			System.out.printf("%d 번째 문자열 : ", i + 1);
			arr[i] = sc.nextLine();
		}
		
		do {
			
			System.out.print("더 값을 입력하시겠습니까?(Y/N) : ");
			input = sc.next().charAt(0);
			
			switch (input)	{
			case 'y' : System.out.print("더 입력하고 싶은 개수 : ");
              num = sc.nextInt(); break;

			case 'n' : System.out.println(Arrays.toString(arrPlus)); return;
			
			default  : System.out.println("잘못된 입력입니다"); 
              input = 'y'; continue;
			}
			
			String[] arrTemp = new String[value + num];
			
			System.arraycopy(arrPlus, 0, arrTemp, 0, arrPlus.length);
			
			sc.nextLine();
			
			for (int i = value; i < value + num; i++) {
				System.out.printf("%d 번째 문자열 : ", i + 1);
				arrTemp[i] = sc.nextLine();
			}
		
			value += num;
			arrPlus = arrTemp;
			
		} while (input == 'y');
	}
}

<설명>

첫 시도 1회 수행 후 그 배열에 요소가 계속 덧붙여지는 형태

처음 만들어진 배열 'arr' 을 'arrPlus' 에 [얕은 복사]

<do>
이후 덧붙여진 요소 수 만큼 길이가 늘어난 빈 배열 'arrTemp' 를 생성
'arrTemp'에 처음 만들어진 'arrPlus' 를 [깊은 복사]	

이후 'arrTemp' 빈 요소에 문자열 저장 후
'arrPlus' 에 'arrTemp' [얕은 복사]

<do> 위치로 돌아가 이후 반복

<의문?> 반복이 시행되면 'arrTemp'는 사라짐
이 때 'arrTemp' 가 참조하는 주소를 가르키는 'arrPlus' 는 같은 값을 계속 유지
일단 생성이 되면 '참조형 변수' 자체가 사라져도 'Heap 메모리 영역'에 있는 값은 보존되는 것???

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

[this] 
생성된 객체에 숨겨진 채 존재 
객체의 주소를 저장
* 자기 자신을 참조하는 형태

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
[향상된 for문] 
단순 읽기 작업에만 사용!!
stream map