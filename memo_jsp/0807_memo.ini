[Servlet Container]

(컨테이너 - 어떤 환경에서나 실행하기 위해 필요한 모든 요소를 포함하는 소프트웨어 패키지)

배포를 위한 포트 연결, 웹 서버 통신을 위한 소켓, 입/출력 [스트림]을 생성하는 역
할을 함.

WAS(Web Application Server)가 [Servlet Container]에 해당하며 대표적으로
 [Tomcat]이 있음.

클라이언트의 요청을 받을 때 마다 새로운 자바 스레드(Thread)를 생성하여
요청을 (병렬적으로) 처리하고 응답을 해줌

클라이언트 마다 [스레드]를 하나 씩 생성 (1 대 1 일처리)
스레드 수 제한을 임의적으로 둘 수 있음 

;Jsp_PDF/01_Servlet이란.pdf


[Servlet 동작 방식(순서)]

WAS == Tomcat

WAS > Servlet Container

1. [요청] 사용자(클라이언트)가 URL(Uniform Resource Locator)을
   입력하면 HTTP Request(HTTP 방식의 요청)를 [Servlet Container]로 전송

2. Http Request를 전송 받은 [Servlet Container]는
   HttpServletRequest(요청 관련 내용이 저장된 객체), 
   HttpServletResponse(응답 관련 내용이 저장된 객체)
   [객체 생성]

3. DD (배포서술자, Deployment Descriptor) = web.xml을 이용해
   사용자가 요청한 URL을 분석하여 어떤 Serlvet Class 에 요청 내용을 전달할지
   찾음 /// [@WebServlet()]

4. 메모리에 해당 Serlvet Class가 load(적재)되어 있지 않으면(객체로 만들어져 있지 않다면)
   해당 Servlet Class의 init() 메서드를 호출해서 객체 생성 및 초기화 진행 ;initialize

5. service() 메서드를 호출하여 클라이언트로부터 전송 받은 방식인 GET, POST 여부에 따라
   doGet() 또는 doPost() 메서드를 호출하여 수행
   → 해당 메서드에서 응답을 위한 코드(java, html)를 작성함

6. doGet() / doPost()로 동적 페이지를 생성 후 HttpServletResponse객체에 응답을
   보냄   

요청 -> 객체 생성 -> 알맞은 요청을 처리하는 Servlet 연결되어 객체 전달
-> 응답 코드 작성 -> 응답


프로젝트 생성 시 xml 안만들어도 tomcat에서 제공

HTTP 포트 번호 중 80 번
- http:// 요청 시 80 번 포트는 생략 가능!
  (참고 : https 생략 가능 포트는 443 번)

ex) http://localhost:80 == http://localhost

네트워크 탭 페이로드를 통해 넘어간 데이터 확인 가능
요청 응답 어떤 식으로 진행되는지 확인!!!!

;==============================================================


[JSP]

Java를 이용해서 동적 웹 페이지(HTML)을 만드는 기술

기본 작성법을 Java -> HTML 

(HTML 기반으로 Java 코드 또한 작성)
(표기법은 HTML 이지만 컴파일 시 Servlet으로 변환되어짐)
(HTML 내부에 Java 코드를 작성하는 듯한 형태)

- 기존 Servlet 동작 방식의 [5] 번 순서

  (doGet() 또는 doPost() 메서드를 호출하여 수행 + 응답 코드 작성)
  에서 기존 Servlet에서 출력 객체를 이용하여
  HTML 문서 작성하던 부분(프레젠테이션 로직)을 [JSP]로 분리함.
  -> 데이터의 입력, 수정 등의 대한 제어를 JSP로 넘겨 가독성을 높임


[작성요령]
;Servlet
요청 발송자(RequestDispatcher) 객체 얻어오기 
		+ JSP 경로 매개 변수에 작성
        req, resp 객체 JSP 에 넘기기

  String path = "경로, web app 폴더 기준";
	RequestDispatcher dispatcher = req.getRequestDispatcher(path);
	dispatcher.forward(req, resp);

;jsp
  <%  %> : Scriptlet(스크립틀릿) / JSP 에서 자바 코드를 작성
  <%= %> : Expression(표현식)    / out.write() 내부에 코드가 작성
  <%@ %> : 페이지 지시자

jsp 파일에서 <%= 로 감싸인 부분 java 코드에서는 "" 없는 걸로 읽힘

[jsp 동작 구조]
jspFile.jsp ==> jspFile.java ==> _jspFile.class

Servlet(요청 / 응답) -> JSP -> Java (Servlet)

결과적으로 Servlet과 JSP는 형태가 다르지만 같은 것!!
(기반 형식이 HTML / Java 냐에 따라 갈림)

클라이언트가 서버로 요청을 하는 방법

  1) form 제출   (GET / POST)
  2) a 태그 이용 (GET)
  3) JS - Ajax   (GET / POST / PUT/ DELETE)
  4) JS - location.href = "주소"; (GET)