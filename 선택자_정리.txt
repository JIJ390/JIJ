====선택자====

id 선택자 (#)                     :  #id 속성값 {}
tag 선택자 (태그명)               :  태그명 {} /일치하는 태그 전부
class 선택자 (.)                  :  .class 속성값 {}
모든 요소 선택자 (*,에스터리스크) :  * {}

기본 속성 선택자

  1. 선택자A [속성명='속성값'] {}
  2. [속성명]
  3. [속성명 = '속성값']

자식 선택자(>, 1 단계 하위)       : 부모 요소 > 자식 요소{}
후손 선택자(띄어쓰기, 하위 모두)  : 부모(조상) 요소 후손 요소{}

포커스가 맞춰졌을 때(:focus)      : 선택자A:focus{} (선택자A는 input 요소)
체크가 되었을 때(:checked)        : 선택자A:checked{} (radio, checkbox 타입만 가능)

활성화 상태일 때(:enabled)        : 선택자A:enabled{} (선택자A는 input 요소)
비활성화 상태일 때(:disabled)     : 선택자A:disabled{} (선택자A는 input 요소)

마우스를 올렸을 때(:hover)        : 선택자A:hover{}
클릭을 하고 있을 때(:active)      : 선택자A:active{}

[동위 선택자]바로 뒤 형제 선택(+) : 선택자A + 선택자B
뒤에 있는 일치하는 형제
 모두 선택(~, 틸드)               : 선택자A ~ 선택자B

일반 구조 선택(위치 기준)
-> 선택된 요소가 지정된 위치의 요소가 
   맞으면 선택하는 선택자  (지정 위치 모든 요소중에서)

  1. 선택된 요소가 첫번째 위치 요소가 맞는 경우  
     - 선택자A:first-child {}

  2. 선택된 요소가 마지막 요소가 맞는 경우  
     - 선택자A:last-child {}

  3. 선택된 요소가 n번째 요소가 맞는 경우  
     - 선택자A:nth-child(숫자 / 수열) {}

  4. 선택된 요소가 뒤에서 n번째 요소가 맞는 경우  
     - 선택자A:nth-last-child(숫자 / 수열) {}

형태 구조 선택
-> 선택된 요소가 지정된 요소 중 
   몇 번째 요소가 맞으면 선택 (선택자A 중에서)

  1. 같이 선택된 형제들 중에서 첫 번째 요소
     - 선택자A:first-of-type {}

  2. 같이 선택된 형제들 중에서 마지막 요소
     - 선택자A:last-of-type {}

  2. 같이 선택된 형제들 중에서 n번재 요소
     - 선택자A:nth-of-type(숫자 / 수열) {}

  2. 같이 선택된 형제들 중에서 뒤에서 n번째 요소
     - 선택자A:nth-last-of-type(숫자 / 수열) {}

부정 선택자(:not())
-> 특정요소만 빼고 선택
     -선택자A:not(선택자 B) (선택된 A 중에서 B만 빼고 선택)

여러 선택자 동시 작성                     : 선택자A, 선택자B {}
여러 클래스를 가진 요소 선택              : .클래스명A.클래스명B {}
특정 태그 중 특정 클래스를 가진 요소 선택 : 태그명.클래스명 {}


선택자 연습 게임 
https://flukeout.github.io/


level 1
-> plate

level 2
-> bento

level 3
-> #fancy

level 4
-> palte apple  또는  plate > apple

level 5
-> #fancy pickle

level 6
-> .small

level 7
-> orange.small

level 8
-> bento orange.small

level 9
-> plate, bento

level 10
-> *

level 11
-> plate *

level 12
-> plate + apple

level 13
-> bento ~ pickle

level 14
-> plate > apple

level 15
-> plate > orange:first-child
또는 
plate > orange:first-of-type

level 16
-> plate > *:only-child
또는
plate > apple, plate > pickle 

level 17
-> .small:last-child

level 18
-> plate:nth-child(3)

level 19
-> bento:nth-last-child(3)
또는
bento:nth-last-of-type(2)
또는
bento:first-of-type

level 20
-> apple:first-of-type

level 21
-> plate:nth-of-type(2n)

level 22
-> plate:nth-of-type(2n+3)

level 23
-> apple:only-of-type

level 24
-> .small:last-of-type

level 25
-> bento:empty

level 26
-> apple:not(.small)

level 27
-> [for]

level 28
-> plate[for]

level 29
-> bento[for='Vitaly']

level 30
-> [for^='S']

level 31
-> [for$='o']

level 32
-> [for*='obb']
